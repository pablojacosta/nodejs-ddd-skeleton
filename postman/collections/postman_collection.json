{
	"info": {
		"_postman_id": "f7567f6d-b6d3-4330-ad60-15b47c72fce7",
		"name": "Node Skeleton",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1.0 Examples",
			"item": [
				{
					"name": "1.1.0 Successful cases",
					"item": [
						{
							"name": "1.1.1 All Examples [empty response]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"The response has empty array\", () => {    ",
											"    pm.expect(responseJson).to.be.an('array');",
											"    pm.expect(responseJson.length).to.be.equal(0);",
											"});",
											"",
											"pm.test(\"Save first the `_id` returned in the response as an environment variable\", () => {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData.count() > 0){",
											"        pm.environment.set(\"ExampleId\", jsonData[0]._id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_SERVER}}/examples",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "5",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name",
											"disabled": true
										},
										{
											"key": "order",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "value",
											"value": "Test 2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.2 New Example",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the `_id` returned in the response as an environment variable",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"ExampleId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"value\": \"Test 1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_SERVER}}/examples",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.3 All Examples [one example into response]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"The response has array\", () => {    ",
											"    pm.expect(responseJson).to.be.an('array');",
											"});",
											"",
											"pm.test(\"The response has all properties\", () => {",
											"    pm.expect(responseJson[0]).to.be.an(\"object\");",
											"    pm.expect(responseJson[0]._id).to.be.a('string');",
											"    pm.expect(responseJson[0].value).to.be.a('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_SERVER}}/examples",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "5",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name",
											"disabled": true
										},
										{
											"key": "order",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "value",
											"value": "Test 1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.4 Update Example",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"Test 2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_SERVER}}/examples/{{ExampleId}}",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples",
										"{{ExampleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.5 Delete Example",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_SERVER}}/examples/{{ExampleId}}",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples",
										"{{ExampleId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.2.0 Failed cases",
					"item": [
						{
							"name": "1.2.1 New Example [Fail Name]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"should receive statusCode 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400)",
											"})",
											"",
											"pm.test(\"should receive msg error in response\", function () {",
											"    pm.expect(jsonData.errors[0].msg).to.equal(\"Invalid value\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"value\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_SERVER}}/examples",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.2 New Example [Fail Id]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"should receive statusCode 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400)",
											"})",
											"",
											"pm.test(\"should receive msg error in response\", function () {",
											"    pm.expect(jsonData.errors[0].msg).to.equal(\"Invalid value\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": null,\n    \"value\": \"Test 1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_SERVER}}/examples",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.3 Update Example [Fail example]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"should receive msg error in response\", function () {",
											"    pm.expect(jsonData.error).to.equal(\"Example not found\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"Test 1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_SERVER}}/examples/13123123",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples",
										"13123123"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.4 Delete Example [Fail example]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"should receive msg error in response\", function () {",
											"    pm.expect(jsonData.error).to.equal(\"Example not found\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_SERVER}}/examples/12344",
									"host": [
										"{{URL_SERVER}}"
									],
									"path": [
										"examples",
										"12344"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ExampleId",
			"value": "",
			"type": "default"
		}
	]
}